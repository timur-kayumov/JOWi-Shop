// JOWi Shop - Prisma Schema with Multi-Tenancy (RLS)
// PostgreSQL database with Row-Level Security

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// MULTI-TENANCY & BUSINESS
// ============================================

model Business {
  id        String   @id @default(uuid())
  name      String
  taxId     String   @unique
  currency  String   @default("UZS")
  locale    String   @default("ru")
  metadata  Json     @default("{}")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @map("deleted_at")

  stores               Store[]
  users                User[]
  products             Product[]
  categories           Category[]
  customers            Customer[]
  loyaltyTransactions  LoyaltyTransaction[]

  @@map("businesses")
}

model Store {
  id        String   @id @default(uuid())
  tenantId  String   @map("tenant_id")
  name      String
  address   String
  phone     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @map("deleted_at")

  business   Business    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  terminals  Terminal[]
  employees  Employee[]
  stockLevels StockLevel[]
  stockBatches StockBatch[]
  receipts   Receipt[]
  movementDocuments MovementDocument[]

  @@index([tenantId])
  @@map("stores")
}

model Terminal {
  id                String   @id @default(uuid())
  tenantId          String   @map("tenant_id")
  storeId           String   @map("store_id")
  name              String
  deviceId          String   @unique @map("device_id")
  fiscalProviderId  String?  @map("fiscal_provider_id")
  settings          Json     @default("{}")
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime? @map("deleted_at")

  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  shifts   Shift[]
  receipts Receipt[]

  @@index([tenantId])
  @@index([storeId])
  @@map("terminals")
}

// ============================================
// USERS & AUTH
// ============================================

model User {
  id        String   @id @default(uuid())
  tenantId  String   @map("tenant_id")
  phone     String   @unique
  email     String   @unique
  name      String
  password  String?
  role      String   // admin, manager, cashier, warehouse
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @map("deleted_at")

  business  Business   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employee  Employee?

  @@index([tenantId])
  @@map("users")
}

model Employee {
  id        String   @id @default(uuid())
  tenantId  String   @map("tenant_id")
  userId    String   @unique @map("user_id")
  storeId   String   @map("store_id")
  pin       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @map("deleted_at")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  shifts   Shift[]
  receipts Receipt[]

  @@index([tenantId])
  @@index([storeId])
  @@map("employees")
}

// ============================================
// PRODUCTS & CATALOG
// ============================================

model Category {
  id        String   @id @default(uuid())
  tenantId  String   @map("tenant_id")
  name      String
  parentId  String?  @map("parent_id")
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @map("deleted_at")

  business Business  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parent   Category? @relation("CategoryTree", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryTree")
  products Product[]

  @@index([tenantId])
  @@index([parentId])
  @@map("categories")
}

model Product {
  id          String   @id @default(uuid())
  tenantId    String   @map("tenant_id")
  name        String
  description String?
  categoryId  String?  @map("category_id")
  taxRate     Decimal  @default(0) @db.Decimal(5, 2)
  isActive    Boolean  @default(true)
  hasVariants Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? @map("deleted_at")

  business Business          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category Category?         @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  variants ProductVariant[]

  @@index([tenantId])
  @@index([categoryId])
  @@map("products")
}

model ProductVariant {
  id         String   @id @default(uuid())
  tenantId   String   @map("tenant_id")
  productId  String   @map("product_id")
  sku        String
  name       String
  barcode    String?
  price      Decimal  @db.Decimal(15, 0)
  cost       Decimal? @db.Decimal(15, 0)
  unit       String   @default("шт")
  attributes Json?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime? @map("deleted_at")

  product      Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  stockLevels  StockLevel[]
  stockBatches StockBatch[]
  receiptItems ReceiptItem[]
  movementItems MovementItem[]

  @@unique([tenantId, sku])
  @@index([tenantId])
  @@index([productId])
  @@index([barcode])
  @@map("product_variants")
}

// ============================================
// INVENTORY & STOCK
// ============================================

model StockLevel {
  id               String   @id @default(uuid())
  tenantId         String   @map("tenant_id")
  storeId          String   @map("store_id")
  variantId        String   @map("variant_id")
  quantity         Decimal  @default(0) @db.Decimal(15, 3)
  reservedQuantity Decimal  @default(0) @db.Decimal(15, 3)
  updatedAt        DateTime @updatedAt

  store   Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([storeId, variantId])
  @@index([tenantId])
  @@map("stock_levels")
}

model StockBatch {
  id         String   @id @default(uuid())
  tenantId   String   @map("tenant_id")
  storeId    String   @map("store_id")
  variantId  String   @map("variant_id")
  quantity   Decimal  @db.Decimal(15, 3)
  costPrice  Decimal  @db.Decimal(15, 0)
  receivedAt DateTime @default(now())
  supplierId String?  @map("supplier_id")

  store   Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([storeId, variantId])
  @@map("stock_batches")
}

model MovementDocument {
  id             String   @id @default(uuid())
  tenantId       String   @map("tenant_id")
  storeId        String   @map("store_id")
  documentNumber String   @map("document_number")
  type           String   // receipt, transfer, return, writeoff, count
  notes          String?
  status         String   @default("draft")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime? @map("deleted_at")

  store Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  items MovementItem[]

  @@unique([tenantId, documentNumber])
  @@index([tenantId])
  @@index([storeId])
  @@map("movement_documents")
}

model MovementItem {
  id         String  @id @default(uuid())
  documentId String  @map("document_id")
  variantId  String  @map("variant_id")
  quantity   Decimal @db.Decimal(15, 3)
  costPrice  Decimal? @db.Decimal(15, 0)

  document MovementDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  variant  ProductVariant   @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@map("movement_items")
}

// ============================================
// SALES & RECEIPTS
// ============================================

model Receipt {
  id             String    @id @default(uuid())
  tenantId       String    @map("tenant_id")
  storeId        String    @map("store_id")
  terminalId     String    @map("terminal_id")
  receiptNumber  String    @map("receipt_number")
  customerId     String?   @map("customer_id")
  employeeId     String    @map("employee_id")
  subtotal       Decimal   @db.Decimal(15, 0)
  discountAmount Decimal   @default(0) @db.Decimal(15, 0)
  taxAmount      Decimal   @default(0) @db.Decimal(15, 0)
  total          Decimal   @db.Decimal(15, 0)
  status         String    @default("draft") // draft, completed, refunded
  fiscalData     Json?     @map("fiscal_data")
  createdAt      DateTime  @default(now())
  completedAt    DateTime?

  store    Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  terminal Terminal      @relation(fields: [terminalId], references: [id], onDelete: Cascade)
  customer Customer?     @relation(fields: [customerId], references: [id], onDelete: SetNull)
  employee Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  items    ReceiptItem[]
  payments Payment[]
  loyaltyTransactions LoyaltyTransaction[]

  @@unique([tenantId, receiptNumber])
  @@index([tenantId])
  @@index([storeId])
  @@index([customerId])
  @@map("receipts")
}

model ReceiptItem {
  id             String  @id @default(uuid())
  receiptId      String  @map("receipt_id")
  variantId      String  @map("variant_id")
  quantity       Decimal @db.Decimal(15, 3)
  price          Decimal @db.Decimal(15, 0)
  discountAmount Decimal @default(0) @db.Decimal(15, 0)
  taxRate        Decimal @db.Decimal(5, 2)
  total          Decimal @db.Decimal(15, 0)

  receipt Receipt        @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([receiptId])
  @@map("receipt_items")
}

model Payment {
  id        String   @id @default(uuid())
  receiptId String   @map("receipt_id")
  method    String   // cash, card, transfer, installment
  amount    Decimal  @db.Decimal(15, 0)
  reference String?
  createdAt DateTime @default(now())

  receipt Receipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)

  @@index([receiptId])
  @@map("payments")
}

// ============================================
// CUSTOMERS & LOYALTY
// ============================================

model Customer {
  id                String   @id @default(uuid())
  tenantId          String   @map("tenant_id")
  name              String
  phone             String?
  email             String?
  loyaltyCardNumber String?  @unique @map("loyalty_card_number")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime? @map("deleted_at")

  business            Business             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  receipts            Receipt[]
  loyaltyTransactions LoyaltyTransaction[]

  @@index([tenantId])
  @@index([phone])
  @@map("customers")
}

model LoyaltyTransaction {
  id         String   @id @default(uuid())
  tenantId   String   @map("tenant_id")
  customerId String   @map("customer_id")
  receiptId  String?  @map("receipt_id")
  points     Decimal  @db.Decimal(10, 2)
  type       String   // earn, redeem
  externalId String?  @map("external_id")
  createdAt  DateTime @default(now())

  business Business  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  receipt  Receipt?  @relation(fields: [receiptId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([customerId])
  @@map("loyalty_transactions")
}

// ============================================
// SHIFTS & CASH OPERATIONS
// ============================================

model Shift {
  id           String    @id @default(uuid())
  tenantId     String    @map("tenant_id")
  terminalId   String    @map("terminal_id")
  employeeId   String    @map("employee_id")
  shiftNumber  Int       @map("shift_number")
  openedAt     DateTime  @default(now())
  closedAt     DateTime?
  openingCash  Decimal   @db.Decimal(15, 0)
  closingCash  Decimal?  @db.Decimal(15, 0)
  status       String    @default("open") // open, closed

  terminal       Terminal         @relation(fields: [terminalId], references: [id], onDelete: Cascade)
  employee       Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  cashOperations CashOperation[]

  @@index([tenantId])
  @@index([terminalId])
  @@map("shifts")
}

model CashOperation {
  id        String   @id @default(uuid())
  tenantId  String   @map("tenant_id")
  shiftId   String   @map("shift_id")
  type      String   // in, out
  amount    Decimal  @db.Decimal(15, 0)
  reason    String
  createdAt DateTime @default(now())

  shift Shift @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([shiftId])
  @@map("cash_operations")
}

// ============================================
// AUDIT LOG
// ============================================

model AuditLog {
  id         String   @id @default(uuid())
  tenantId   String   @map("tenant_id")
  userId     String?  @map("user_id")
  action     String   // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, etc.
  entity     String   // User, Product, Receipt, etc.
  entityId   String?  @map("entity_id")
  changes    Json?    // Before/after values for updates
  metadata   Json?    // Additional context (IP, user agent, etc.)
  createdAt  DateTime @default(now())

  @@index([tenantId])
  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}
